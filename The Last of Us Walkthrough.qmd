---
title: "The Last of Us Walkthrough"
author: "Rachel Garton"
---

First, load the packages you need to properly code your data.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

# Load the packages we'll need
library(tidyverse)
library(lubridate)
library(readxl)
library(writexl)
library(janitor)

```

## Last of Us - Critic Reviews

### Load the data.

Run the code below to load the data. It should be a number of metacritic review from the Last of Us release period.

```{r}

last_of_us_reviews <- read.csv("critic_reviews_g1.csv")


```

Now, that you've loaded the data, you'll want to figure out what you want to *do* with the data.

Let's say you wanted to start off with reading a review from IGN. To filter only for this review, we will use the filter function "id=IGN". In doing this, we should get the data solely for that review.

```{r}

last_of_us_reviews %>% 
  filter(id == "IGN")

```

Great, we've pulled up the review from IGN. It looks like they gave the game a perfect score. Now that you think of it, you want to figure out who gave The Last of Us its lowest score.

To do this, we'll want to arrange the data in assecending order. To sort by the lowest value/score first, we'll want to use the arrange function followed by "score".

```{r}

last_of_us_reviews %>% 
  arrange(score)

```

It looks like Gamer.no gave The Last of Us the lowest score with a "70".

Perhaps from here, you want to figure out who reviewed the game the fastest. In fact, let's see who reviewed the game after two weeks of it coming out and in ascending order.

To do this, we combine a bit of both functions we just did. Instead of arranging the data set by score, we now arrange it by date.

```{r}

last_of_us_reviews %>% 
  arrange(date)

```

Now we know who were the first people to review the game. From here, we'll want to filter who would have reviewed the game before August 2014. To do this, we now filter for the month of July.

```{r}

last_of_us_reviews %>% 
  arrange(date) %>% 
  filter(date == "2014-07-28")

```

Cool, now we know of the 71 original reviews, 19 of them came two weeks after the game came out. Let's say the next thing you want to know, specifically from the reviews on July 28, is how many of them gave the movie a perfect score.

There are a couple ways to go about this, but let's start with one that pulls from our original data set.

First, we'll want to use the group_by function to pull from the July 28 date.

```{r}
last_of_us_reviews %>% 
  group_by(date == "2014-07-28")

```

From there, we'll filter for how many get a score of 100.

```{r}
last_of_us_reviews %>% 
  group_by(date == "2014-07-28") %>% 
  filter(score == "100")
```

Finally, we'll put it all together so that r can count how many of the July 28 reviews got a perfect score.

```{r}

last_of_us_reviews %>% 
  group_by(date == "2014-07-28") %>% 
  filter(score == "100") %>% 
  summarise(count = n())

```

It looks like 8 of the reviews got a perfect score.

Our other option involves creating a new data set to get the exact same information. Let's start off by creating a new data set.

```{r}
July_28_reviews <- last_of_us_reviews %>% filter(date == "2014-07-28")
```

Now that that's done, let's do the same thing from before, but just filter by how many got a score of 100.

```{r}
July_28_reviews %>% 
  filter(score == "100") %>% 
  summarise(count = n())

```

And we got 8 again.

Now you know the basics of filtering and sorting!
